#=======================================================
# GitHub Action Workflow Demo
#
# Github Actionsâ€” Everything You Need to Know to Get Started
# https://towardsdatascience.com/github-actions-everything-you-need-to-know-to-get-started-537f1dffa0ed
#
# Version      Date        Info
# 1.0          2022        Initial Version
#
# Made by Nodar Momtselidze ADV-IT Copyleft (c) 2022
#========================================================
# Both GitLab CI/CD and GitHub Actions allow you to run workflows at a specific interval. 
# In GitLab CI/CD, pipeline schedules are configured with the UI, while in GitHub Actions you can trigger a workflow on a scheduled interval with the "on" key.
# For more information, see "Events that trigger workflows."
#========================================================
name: GitHub Actions Demo
env:
  APPLICATION_NAME    : "DemoFlask"
  DEPLOY_PACKAGE_NAME : "flask-deploy-ver-${{ github.sha }}"
  
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€

on: [push]


jobs:
  demo_testing:
    name: test to staging
    runs-on: ubuntu-latest    

    steps:
     - name: Print Hello Message in Testing
       run : echo "Hello World from Testing job"
       
     - name: Execure few commands
       run : |
         echo "Hello Message1"
         echo "Hello Message2"
         echo "Appication name: ${{ env.APPLICATION_NAME }}"
    
     - name: List current folder
       run : ls -la
   
     - name: Git clone my repo
       uses: actions/checkout@v1   
  
     - name: List current folder
       run : ls -la
  
  demo_deploy:
    name: test to deploing
    runs-on: ubuntu-latest

    needs: [demo_testing]
    env:
      VAR1 : "This is Job Level Variable1"
      VAR2 : "This is Job Lebel Variable2"
    
    steps:
    - name: Print Hello Message in Deploy
      run : echo "Hello World from Deploy job"
      
    - name: Print env vars
      run : |
        echo "Var1 = ${{ env.VAR1 }}"
        echo "Var2 = ${{ env.VAR2 }}"
        echo "Var3 = $LOCAL_VAR"
      env:
        LOCAL_VAR: "This is Superr local Environment variable"

    
    - name: Printing Deployment package
      run : echo "Deplyo pakcage name is ${{ env.DEPLOY_PACKAGE_NAME }}"
    
    - name: Lets test some packages if they are here 1
      run : aws --version

    - name: Lets test some packages if they are here 2
      run : zip --version       
